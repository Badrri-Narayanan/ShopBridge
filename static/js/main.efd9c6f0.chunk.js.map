{"version":3,"sources":["redux/products/products.types.js","redux/products/products.actions.js","util.js","redux/cart/cart.types.js","components/product-item/ProductItem.component.jsx","redux/cart/cart.actions.js","components/products/Products.component.jsx","page/HomePage/HomePage.component.jsx","components/input-box/InputBox.component.jsx","page/AddProducts/AddProducts.component.jsx","page/UpdateProducts/UpdateProducts.component.jsx","components/Cart/Cart.component.jsx","components/header/Header.component.jsx","App.js","serviceWorker.js","redux/cart/cart.utils.js","redux/cart/cart.reducer.js","redux/products/products.reducer.js","redux/root-reducer.js","redux/store/store.js","index.js"],"names":["ProductActionTypes","SET_PRODUCTS","FETCH_PRODUCT_START","FETCH_PRODUCT_SUCCESS","FETCH_PRODUCT_FAILURE","fetchProductsStartAsync","dispatch","type","fetch","then","resp","json","new_product_list","payload","catch","error","errorMessage","message","formatCurrency","n","Number","toFixed","toLocaleString","CartActionType","ADD_CART_ITEM","REMOVE_CART_ITEM","connect","AddItemToCart","product","className","sytle","height","width","href","id","onClick","src","imgUrl","alt","title","style","color","description","price","state","products","products_list","fetchProductsFromBackend","useEffect","map","HomePage","handleSort","event","setState","sort","target","value","filterList","handleRemoveFromCart","cartItems","filter","el","localStorage","setItem","JSON","stringify","a","b","filteredProduct","isButtonDisabled","this","React","Component","InputBox","labelName","otherProps","AddProducts","useState","imgurl","setProduct","handleChange","onSubmit","preventDefault","method","headers","body","response","data","alert","handleSubmit","onChange","placeholder","required","UpdateProducts","new_title","flag","key","checkIfProductObjectIsEmpty","cart_items","RemoveItemFromCart","item","length","quantity","reduce","c","Header","to","App","exact","path","component","Boolean","window","location","hostname","match","addCartItem","newItem","array","forEach","checkIfItemAlreadyinArray","removeCartItem","console","log","cartItem","INITIAL_STATE","cartReducer","action","isFetching","undefined","rootReducer","combineReducers","middleware","thunk","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efd9c6f0.chunk.js","sourcesContent":["const ProductActionTypes = {\r\n    SET_PRODUCTS : 'SET_PRODUCTS',\r\n    FETCH_PRODUCT_START : 'FETCH_PRODUCT_START',\r\n    FETCH_PRODUCT_SUCCESS : 'FETCH_PRODUCT_SUCCESS',\r\n    FETCH_PRODUCT_FAILURE : 'FETCH_PRODUCT_FAILURE',\r\n}\r\n\r\nexport default ProductActionTypes;","import ProductActionTypes from \"./products.types\";\r\n\r\nexport const setProducts = (products_array) => ({\r\n    type : ProductActionTypes.SET_PRODUCTS,\r\n    payload : products_array,\r\n});\r\n\r\nexport const fetchProductsStart = () => ({\r\n    type : ProductActionTypes.FETCH_PRODUCT_START,\r\n});\r\n\r\nexport const fetchProductsSuccess = (productsArray) => ({\r\n    type : ProductActionTypes.FETCH_PRODUCT_SUCCESS,\r\n    payload : productsArray,\r\n});\r\n\r\nexport const fetchProductsFailure = (errorMessage) => ({\r\n    type : ProductActionTypes.FETCH_PRODUCT_FAILURE,\r\n    payload : errorMessage\r\n});\r\n\r\nexport const fetchProductsStartAsync = () => {\r\n    return dispatch => {\r\n        dispatch(fetchProductsStart());\r\n        fetch('https://shopbridge.herokuapp.com/')\r\n            .then(resp => resp.json())\r\n            .then(new_product_list => dispatch(fetchProductsSuccess(new_product_list)))\r\n            .catch(error => dispatch(fetchProductsFailure(error.message)));\r\n    }\r\n}","const formatCurrency = (n) => {\r\n    return \"₹ \" + Number(n.toFixed(2)).toLocaleString() + \" \";\r\n}\r\n\r\nexport default formatCurrency;","const CartActionType = {\r\n    ADD_CART_ITEM : 'ADD_CART_ITEM',\r\n    REMOVE_CART_ITEM : 'REMOVE_CART_ITEM',\r\n}\r\n\r\nexport default CartActionType;","import React from 'react';\r\nimport {connect} from 'react-redux'\r\n\r\nimport formatCurrency from '../../util';\r\nimport {AddItemToCart} from '../../redux/cart/cart.actions'\r\n\r\nconst ProductItem = ({product, AddItemToCart}) => {\r\n    return (\r\n    <div className='col-md-4' key={product.id} sytle={{height: '900px', width: '550px'}}>\r\n        <div className='thumbnail text-center'>\r\n            <a href={`#${product.id}`} onClick={() => AddItemToCart(product)}>\r\n                <img \r\n                    src={product.imgUrl}\r\n                    alt={product.title}\r\n                    style={{width: \"500px\", height: \"250px\"}}\r\n                />\r\n                <p style={{color: \"lightyellow\"}}>{product.title}</p>\r\n            </a>\r\n            <div>\r\n                <p>Description</p>\r\n                <p>{product.description}</p>\r\n                <hr/>\r\n                <b>{formatCurrency(product.price)}</b>\r\n                <button \r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => AddItemToCart(product)}\r\n                >Add to Cart</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    AddItemToCart : product => dispatch(AddItemToCart(product)),\r\n})\r\n\r\nexport default connect(null,mapDispatchToProps)(ProductItem);","import CartActionType from \"./cart.types\";\r\n\r\nexport const AddItemToCart = (item) => ({\r\n    type: CartActionType.ADD_CART_ITEM,\r\n    payload: item,\r\n})\r\n\r\nexport const RemoveItemFromCart = (item) => ({\r\n    type: CartActionType.REMOVE_CART_ITEM,\r\n    payload: item,\r\n})\r\n","import React, {useEffect} from 'react';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { fetchProductsStartAsync } from '../../redux/products/products.actions'\r\nimport ProductItem from '../product-item/ProductItem.component';\r\n\r\nconst Products = ({fetchProductsFromBackend, products}) => {\r\n    useEffect(() => {\r\n        fetchProductsFromBackend();\r\n    }, [fetchProductsFromBackend]);\r\n\r\n    return (\r\n        <div className='row'>\r\n            {\r\n                products.map((product, id) => (\r\n                    <ProductItem key={id} product={product} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    products : state.products_list.products\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchProductsFromBackend : products => dispatch(fetchProductsStartAsync())\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Products);\r\n","import React from 'react'\r\nimport Products from '../../components/products/Products.component'\r\n\r\nimport './HomePage.styles.css'\r\n\r\nclass HomePage extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          filteredProduct : [],\r\n          sort: '',\r\n        }\r\n      }\r\n      handleSort = (event) => {\r\n        this.setState({sort: event.target.value});\r\n        this.filterList();\r\n      }\r\n      \r\n      handleRemoveFromCart = (event, product) => {\r\n        this.setState(state => {\r\n          const cartItems = this.state.cartItems.filter(el => el.id !== product.id);\r\n          localStorage.setItem('cartItems', JSON.stringify(cartItems));\r\n          return {cartItems};\r\n        })\r\n      }\r\n      filterList = () => {\r\n        this.setState(state => {\r\n          if(this.state.sort !== '') {\r\n            this.state.products.sort((a,b) => \r\n              (this.state.sort === \"lowest\")?(a.price < b.price?1:-1):(a.price > b.price?1:-1)\r\n            )\r\n          } else {\r\n            this.state.products.sort((a,b) => (a.id < b.id?1:-1))\r\n          }\r\n          return {filteredProduct : this.state.products}\r\n        })\r\n      }\r\n    render() {\r\n        return (\r\n            <div className=\"homepage\">\r\n                <Products\r\n                    isButtonDisabled={this.state.isButtonDisabled} \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\n\r\nconst InputBox = ({labelName, ...otherProps}) => (\r\n    <div className=\"form-group\">\r\n        <label>{labelName}</label>\r\n        <input {...otherProps}/>\r\n    </div>\r\n);\r\n\r\nexport default InputBox;","import React, { useState } from 'react'\r\nimport InputBox from '../../components/input-box/InputBox.component'\r\n\r\nconst AddProducts = () => {\r\n    \r\n    const [product, setProduct] = useState({\r\n        title: '',\r\n        description: '',\r\n        price: '',\r\n        imgurl: '',\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        const {value, id} = event.target;\r\n        setProduct({\r\n            ...product,\r\n            [id]: value\r\n        });\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        fetch('https://shopbridge.herokuapp.com/', {\r\n\t\t\tmethod: 'post',\r\n\t\t\theaders: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n            },\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\t'title': product.title,\r\n\t\t\t\t'description': product.description,\r\n                'price': product.price,\r\n                'imgurl': product.imgurl,\r\n\t\t\t})\r\n\t\t}).then(response => response.json())\r\n\t\t.then(data => {\r\n            alert(data);\r\n            setProduct({\r\n                title: '',\r\n                description: '',\r\n                price: '',\r\n                imgurl: '',\r\n            })\r\n        });\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(event) => handleSubmit(event)}>\r\n            <InputBox \r\n                labelName=\"Enter Product Title\"\r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                id=\"title\"\r\n                value={product.title} \r\n                onChange={(event) => handleChange(event)} \r\n                placeholder=\"Title\" \r\n            required/>\r\n\r\n            <InputBox\r\n                labelName=\"Enter Description\"\r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                id=\"description\" \r\n                value={product.description} \r\n                onChange={(event) => handleChange(event)}\r\n                placeholder=\"Description\" \r\n            required/>\r\n\r\n            <InputBox\r\n                labelName=\"Enter Price\"\r\n                type=\"number\" \r\n                className=\"form-control\" \r\n                id=\"price\" \r\n                value={product.price} \r\n                onChange={(event) => handleChange(event)} \r\n                placeholder=\"Price\"\r\n            required/>\r\n\r\n            <InputBox\r\n                labelName=\"Enter Image URL\"\r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                id=\"imgurl\" \r\n                value={product.imgurl} \r\n                onChange={(event) => handleChange(event)} \r\n                placeholder=\"Image URL\" \r\n            required/>\r\n\r\n            <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n    );\r\n    \r\n}\r\n\r\nexport default AddProducts;","import React, {useState} from 'react';\r\nimport InputBox from '../../components/input-box/InputBox.component';\r\n\r\nconst UpdateProducts = () => {\r\n\r\n    const [product, setProduct] = useState({\r\n        title: '',\r\n        description: '',\r\n        price: '',\r\n        imgurl: '',\r\n        new_title: '',\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        const {value, id} = event.target;\r\n        setProduct({\r\n            ...product,\r\n            [id]: value\r\n        });\r\n    }\r\n\r\n    const checkIfProductObjectIsEmpty = () => {\r\n        let flag = true;\r\n        for(let key in product) {\r\n            if(product[key] !== '' && key !==\"title\")\r\n                flag = false;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(checkIfProductObjectIsEmpty()) {\r\n            alert(\"Invalid update request!\\nAtleast one optional field must contain an updated value\")\r\n        } else { \r\n            fetch('https://shopbridge.herokuapp.com/', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        'title': product.title,\r\n                        'new_title': product.new_title,\r\n                        'description': product.description,\r\n                        'price': product.price,\r\n                        'imgurl': product.imgurl,\r\n                    })\r\n                }).then(response => response.json())\r\n            .then(data => {\r\n                alert(data);\r\n                setProduct({\r\n                    title: '',\r\n                    description: '',\r\n                    price: '',\r\n                    imgurl: '',\r\n                    new_title: '',\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(event) => handleSubmit(event)}>\r\n            <InputBox\r\n                labelName=\"Enter the Product Title you want to Edit/Update below:\"\r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                id=\"title\"\r\n                value={product.title} \r\n                onChange={(event) => handleChange(event)} \r\n                placeholder=\"title\"\r\n            required/>\r\n            <InputBox\r\n                labelName=\"Enter New Product Title (*Optional)\"\r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                id=\"new_title\"\r\n                value={product.new_title} \r\n                onChange={(event) => handleChange(event)} \r\n                placeholder=\"new title\"\r\n            />\r\n            <InputBox\r\n                labelName=\"Enter New Desciption (*Optional)\"\r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                id=\"description\" \r\n                value={product.description} \r\n                onChange={(event) => handleChange(event)}\r\n                placeholder=\"description\" \r\n            />\r\n            <InputBox\r\n                labelName=\"Enter New Price (*Optional)\"\r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                id=\"price\" \r\n                value={product.price} \r\n                onChange={(event) => handleChange(event)} \r\n                placeholder=\"price\" \r\n            />\r\n            <InputBox\r\n                labelName=\"Enter New Image URL (*Optional)\"\r\n                type=\"text\" \r\n                className=\"form-control\" \r\n                id=\"imgurl\" \r\n                value={product.imgurl} \r\n                onChange={(event) => handleChange(event)} \r\n                placeholder=\"image url\" \r\n            />\r\n            <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default UpdateProducts;","import React from 'react'\r\n\r\nimport formatCurrency from '../../util'\r\nimport {connect} from 'react-redux';\r\n\r\nimport {RemoveItemFromCart} from '../../redux/cart/cart.actions'\r\nimport './Cart.styles.css'\r\n\r\nconst Cart = ({cartItems, RemoveItemFromCart}) => (\r\n    <div className=\"alert alert-info\">\r\n        {\r\n            (cartItems.length === 0)?\r\n                \"Cart is Empty\"\r\n                :\r\n                <div>\r\n                    You have {cartItems.length} products in the basket\r\n                </div>\r\n        }\r\n        {\r\n            cartItems.length > 0 &&\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        cartItems.map(item =>\r\n                            <li key = {`${item.id}`}>\r\n                                <b>{item.title}</b>\r\n                                    X {item.quantity} = {item.price * item.quantity}\r\n                                <button \r\n                                    onClick={() => RemoveItemFromCart(item)}\r\n                                    className='btn btn-danger'\r\n                                >X</button>\r\n                            </li>\r\n                        )\r\n                    }\r\n                </ul>\r\n                Total:\r\n                {\r\n                    formatCurrency(cartItems.reduce((a, c) => a + (c.price*c.quantity), 0))\r\n                }\r\n                <button \r\n                    className='btn btn-primary'\r\n                    onClick={() => alert(\"Proceeding to Payment\")}\r\n                >Check Out</button>\r\n            </div>\r\n        }\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n    cartItems: state.cart_items.cartItems,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    RemoveItemFromCart : item => dispatch(RemoveItemFromCart(item)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","import React from 'react'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './Header.styles.css'\r\n\r\nconst Header = () => (\r\n    <div className=\"alert alert-info menu\">\r\n        <div className=\"menu-item\">\r\n            <Link to=\"/shopbridge\">Home</Link>\r\n        </div>\r\n        <div className=\"menu-item\">\r\n            <Link to=\"/shopbridge/add-products\">Add Products</Link>\r\n        </div>\r\n        <div className=\"menu-item\">\r\n            <Link to=\"/shopbridge/update-products\">Update Products</Link>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './App.css';\r\nimport {Route} from 'react-router'\r\n\r\nimport HomePage from './page/HomePage/HomePage.component'\r\nimport AddProducts from './page/AddProducts/AddProducts.component';\r\nimport UpdateProducts from './page/UpdateProducts/UpdateProducts.component';\r\nimport Cart from './components/Cart/Cart.component'\r\nimport Header from './components/header/Header.component';\r\n\r\nclass App extends React.Component {\r\n  \r\n  render() {\r\n    return (\r\n        <div className='container app'>\r\n          <h1>Shop Bridge App</h1>\r\n          <div className=\"app-body\">\r\n            <div className=\"header\">\r\n              <Header />\r\n              <Route exact path=\"/shopbridge\" component={HomePage} />\r\n              <Route exact path=\"/shopbridge/add-products\" component={AddProducts} />\r\n              <Route exact path=\"/shopbridge/update-products\" component={UpdateProducts} />\r\n            </div>\r\n            <div className=\"panel panel-primary cart\" >\r\n              <Cart />\r\n            </div>\r\n          </div>\r\n         </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const checkIfItemAlreadyinArray = (array, newItem) => {\r\n    let flag = false;\r\n    array.forEach(item => {\r\n        if(item.id === newItem.id) {\r\n            flag = true;\r\n        }\r\n    })\r\n    return flag;\r\n}\r\n\r\nexport const addCartItem = (cartItems, newItem) => {\r\n    if(!checkIfItemAlreadyinArray(cartItems, newItem)) {\r\n        return [\r\n            ...cartItems,\r\n            {...newItem, quantity: 1},\r\n        ];\r\n    } else {\r\n        return cartItems.map(item => {\r\n            if(item.id === newItem.id) {\r\n                return {\r\n                    ...item,\r\n                    quantity: item.quantity+1,\r\n                }\r\n            }\r\n            return item\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeCartItem = (cartItems, item) => {\r\n    if(item.quantity === 1) {\r\n        console.log(item)\r\n        return cartItems.filter(cartItem => cartItem.id !== item.id)\r\n    } else {\r\n        return cartItems.map(cartItem => {\r\n            if(cartItem.id === item.id) {\r\n                return {\r\n                    ...item,\r\n                    quantity: item.quantity-1,\r\n                }\r\n            }\r\n            return cartItem\r\n        })\r\n    }\r\n}\r\n","import CartActionType from \"./cart.types\"\r\nimport { addCartItem, removeCartItem } from \"./cart.utils\"\r\n\r\nconst INITIAL_STATE = {\r\n    cartItems : [],\r\n}\r\n\r\nconst cartReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case CartActionType.ADD_CART_ITEM :\r\n            return {\r\n                ...state,\r\n                cartItems : addCartItem(state.cartItems, action.payload),\r\n            }\r\n        case CartActionType.REMOVE_CART_ITEM :\r\n            return {\r\n                ...state,\r\n                cartItems : removeCartItem(state.cartItems, action.payload),\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport default cartReducer;","import ProductActionTypes from \"./products.types\"\r\n\r\nconst INITIAL_STATE = {\r\n    products : [],\r\n    isFetching : false,\r\n    errorMessage : undefined,\r\n}\r\n\r\nexport const productsReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case ProductActionTypes.SET_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products : action.payload\r\n            }\r\n        case ProductActionTypes.FETCH_PRODUCT_START:\r\n            return {\r\n                ...state,\r\n                isFetching : true\r\n            }\r\n        case ProductActionTypes.FETCH_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                products : action.payload,\r\n                isFetching : false,\r\n            }\r\n        case ProductActionTypes.FETCH_PRODUCT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetching : false,\r\n                errorMessage : action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport cartReducer from './cart/cart.reducer';\r\n\r\nimport {productsReducer} from './products/products.reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    products_list : productsReducer,\r\n    cart_items : cartReducer,\r\n})\r\n\r\nexport default rootReducer;","import {applyMiddleware, createStore} from 'redux';\r\nimport {logger} from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from '../root-reducer'\r\n\r\nconst middleware = [thunk]\r\n\r\nif(process.env.NODE_ENV === \"development\") {\r\n    middleware.push(logger)\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middleware))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport {Provider} from 'react-redux'\r\nimport { store } from './redux/store/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}